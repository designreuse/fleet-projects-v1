<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.comodin.fleet</groupId>
    <artifactId>fleet-projects</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <url>http://maven.apache.org</url>

    <modules>
        <module>fleet-core</module>
        <module>fleet-api</module>
        <module>fleet-portal</module>
        <module>fleet-service</module>
    </modules>

    <properties>
        <!--
            ${project.build.directory } results in the path to your "target" dir, this is the same as ${pom.project.build.directory }
            ${project.build. outputD irectory } results in the path to your "target/classes" dir
            ${project.name } refers to the name of the project.
            ${project.version } refers to the version of the project.
            ${project.build.finalName } refers to the final name of the file created when the built project is packaged
        -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring.version>4.3.0.RELEASE</spring.version>
        <hibernate.validator.version>5.2.4.Final</hibernate.validator.version>
        <project.parentBasedir>${project.parent.basedir}</project.parentBasedir>
    </properties>


    <dependencyManagement>
        <dependencies>

            <!--web  jstl taglibs ================================================================================== -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>1.2</version>
            </dependency>
            <dependency>
                <groupId>taglibs</groupId>
                <artifactId>standard</artifactId>
                <version>1.1.2</version>
            </dependency>
            <!--上传文件-->
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>1.3.1</version>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.5</version>
            </dependency>
            <!--web  jstl taglibs ================================================================================== -->
            <!--web  servlet jsp =================================================================================== -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>3.1.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet.jsp</groupId>
                <artifactId>javax.servlet.jsp-api</artifactId>
                <version>2.3.1</version>
                <scope>provided</scope>
            </dependency>
            <!--web  servlet jsp =================================================================================== -->

            <!--Test jar-->
            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>6.9.10</version>
                <scope>test</scope>
            </dependency>

            <!--Tools Jar-->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpmime</artifactId>
                <version>4.5.2</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpcore</artifactId>
                <version>4.4.4</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>4.5.2</version>
            </dependency>

            <!--日志-->
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.17</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.21</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>1.7.21</version>
            </dependency>
            <!--Spring-->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aop</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context-support</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-expression</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-orm</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-oxm</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>${hibernate.validator.version}</version>
            </dependency>
            <!--spring-aop依赖-->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>1.8.2</version>
            </dependency>
            <!--spring-注解依赖-->
            <dependency>
                <groupId>javax.inject</groupId>
                <artifactId>javax.inject</artifactId>
                <version>1</version>
            </dependency>
            <!--spring-oxm依赖-->
            <dependency>
                <groupId>org.codehaus.castor</groupId>
                <artifactId>castor-xml</artifactId>
                <version>1.4.1</version>
            </dependency>
            <!--spring-json依赖-->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>2.7.4</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.7.4</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>2.7.4</version>
            </dependency>
            <!-- http://mvnrepository.com/artifact/org.quartz-scheduler/quartz -->
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz</artifactId>
                <version>2.2.3</version>
            </dependency>

            <!--Mybatis-->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>3.4.0</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>1.3.0</version>
            </dependency>
            <!-- Mybatis Generator -->
            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-core</artifactId>
                <version>1.3.2</version>
                <scope>compile</scope>
                <optional>true</optional>
            </dependency>
            <!--Mybati 集成通用Mapper-->
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>mapper</artifactId>
                <version>3.3.8</version>
            </dependency>
            <!--Mybati 集成通用Mapper 通用Mapper依赖JPA，所以还需要下载persistence-api-1.0.jar-->
            <dependency>
                <groupId>javax.persistence</groupId>
                <artifactId>persistence-api</artifactId>
                <version>1.0.2</version>
            </dependency>
            <!--分页插件-->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>4.1.6</version>
            </dependency>
            <dependency>
                <groupId>com.github.jsqlparser</groupId>
                <artifactId>jsqlparser</artifactId>
                <version>0.9.5</version>
            </dependency>

            <!--数据库 Jar 连接池-->
            <!--jdbc-mysql-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.39</version>
            </dependency>
            <!--jdbc-pool-druid-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>1.0.20</version>
            </dependency>
            <!--NoSQL-redis-->
            <dependency>
                <groupId>redis.clients</groupId>
                <artifactId>jedis</artifactId>
                <version>2.8.1</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.12</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>

        <finalName>${project.artifactId}</finalName>

        <pluginManagement>
            <plugins>

                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>9.4.0.M0</version>
                    <configuration>

                        <httpConnector><!--端口配置 -->
                            <port>8080</port>                   <!--连接器监听的端口号。 默认情况下它是8080。-->
                            <idleTimeout>60000</idleTimeout>    <!--最大空闲时间联系。-->
                        </httpConnector>

                        <!--热部署
                            scanIntervalSeconds 扫描webapp变化的间隔，单位秒，当扫描到变化后，将执行自动热重部署。
                                    默认是0，表示停止热部署扫描。配置值大于0激活它。
                            reload  设置到“manual”，表示你需要在控制台执行换行来触发插件执行扫描。这有时候是有用的，当你一次做一系列的改变，你想忽略中间的改变时，就可以使用reload参数。
                                    默认值“automatic”，与scanIntervalSeconds联合使用，表示当改变发生时，自动热重部署。-->
                        <scanIntervalSeconds>3</scanIntervalSeconds>
                        <reload>automatic</reload>


                        <stopPort>9090</stopPort><!--stopPort 可选。端口用于监听停止命令。运行stop或者run-forked目标时使用。-->
                        <stopKey>shutdown</stopKey><!--stopKey 可选。用于和stopPort联合使用，用于停止jetty。运行stop或者run-forked目标时使用。-->


                        <!--配置你的WebApp
                            contextPath：            你的应用的上下文路径。 默认情况下,这个设置 / 。 如果使用自定义值为这个参数,您可能希望包括领先的/, example/mycontext.
                            descriptor：             web.xml文件的路径。
                            baseResource：           Jetty提供静态资源的路径，默认是src/main/webapp。
                            resourceBases：          用于代替baseResource提供静态资源，是一个数组，可以提供多个提供静态资源的文件夹。
                            webAppSourceDirectory   默认情况下,这个设置${project.basedir}/src/main/webapp 。 如果你的静态资源在不同的位置,设置相应的参数。

                            defaultsDescriptor：     webdefault.xml的路径，在web.xml之前使用。如果你不提供，Jetty用一个默认文件，在jetty-webapp.jar中。
                        -->
                        <!--war：WAR文件的位置。默认是${project.build.directory}/${project.build.finalName}.war。如果需要，设置你的自定义路径。-->
                        <webApp>
                            <contextPath>/${project.artifactId}</contextPath>   <!-- 配置项目在容器中的根路径 -->
                            <!--<descriptor>${project.basedir}/src/main/webapp/WEB-INF/web.xml</descriptor>-->
                            <!--<baseResource>${project.basedir}/src/main/webapp</baseResource>-->
                            <!--<classesDirectory>${project.build.outputDirectory}</classesDirectory>-->
                            <!--<webAppSourceDirectory>${project.basedir}/src/main/webapp</webAppSourceDirectory>-->

                            <defaultsDescriptor>src/test/resources/webdefault.xml</defaultsDescriptor>

                            <!-- 设置其他项目extraClasspath，多个用";"隔开 -->
                            <extraClasspath>
                                ${project.parentBasedir}/fleet-core/target/classes;
                                ${project.parentBasedir}/fleet-service/target/classes;
                            </extraClasspath>
                        </webApp>

                        <!-- 设置监听目录 scanTargets 可选的。 定期扫描的文件和目录列表除了这些插件自动扫描。-->
                        <scanTargets>
                            <scanTarget>${project.parentBasedir}/fleet-core/target/classes;</scanTarget>
                            <scanTarget>${project.parentBasedir}/fleet-service/target/classes;</scanTarget>
                        </scanTargets>

                    </configuration>
                </plugin>


                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>tomcat-maven-plugin</artifactId>
                    <version>1.1</version>
                    <configuration>
                        <url>http://localhost:8080/manager/text</url>
                        <server>tomcat</server>
                        <!--<path>/</path><port>8080</port>   &lt;!&ndash;port 是tomcat 的端口号&ndash;&gt;-->
                        <!--<uriEncoding>UTF-8</uriEncoding>    &lt;!&ndash;uriEncoding  URL按UTF-8进行编码，这样就解决了中文参数乱码。&ndash;&gt;-->
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.2</version>
                    <configuration>
                        <url>http://localhost:8080/manager/text</url>
                        <server>tomcat</server>
                        <!--<path>/</path><port>8080</port>   &lt;!&ndash;port 是tomcat 的端口号&ndash;&gt;-->
                        <!--<uriEncoding>UTF-8</uriEncoding>    &lt;!&ndash;uriEncoding  URL按UTF-8进行编码，这样就解决了中文参数乱码。&ndash;&gt;-->
                    </configuration>
                </plugin>

            </plugins>

        </pluginManagement>


        <!--*********************************************************************************************************-->
        <!--                                                通用插件                                                 -->
        <!--*********************************************************************************************************-->
        <plugins>


            <!--maven-compiler-plugin 编译配置 默认绑定到comile phase。当前版本的maven默认使用jdk1.5，使用更新的java版本必须手动配置。 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding><!-- 指定编码格式，否则在DOS下运行mvn compile命令时会出现莫名的错误，因为系统默认使用GBK编码 -->
                </configuration>
            </plugin>


            <!--maven-surefire-plugin 单元测试 默认绑定到test阶段。 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <forkMode>once</forkMode>
                    <argLine>-Dfile.encoding=UTF-8</argLine>
                    <includes>
                        <include>**/*Test.java</include>
                    </includes>
                    <!--<testFailureIgnore>true</testFailureIgnore>  &lt;!&ndash;测试有失败用例时，是否继续构建 &ndash;&gt;-->
                    <!--<skip>false</skip>                            &lt;!&ndash;是否跳过测试阶段，ture 会跳过测试和编译阶段 &ndash;&gt;-->
                    <!--<skipTests>false</skipTests>                  &lt;!&ndash;是否跳过测试阶段，true 会跳过测试，但仍然进行编译 &ndash;&gt;-->
                </configuration>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.0</version>
                <!--<executions><execution><phase>compile</phase><goals><goal>jar</goal><goal>test-jar</goal></goals></execution></executions>-->
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.6</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
                <!--<executions><execution><phase>compile</phase><goals><goal>javadoc</goal><goal>test-javadoc</goal></goals></execution></executions>-->
            </plugin>

        </plugins>
    </build>

    <name>fleet</name>
</project>
